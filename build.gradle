plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.codenarc'
}

ext {
    mavenUsername = findProperty("maven.username")
    mavenPassword = findProperty("maven.password")
    shouldRelease = "${findProperty('release')}".toBoolean()
}

config {
    release = shouldRelease

    info {
        name          = 'Mementox'
        vendor        = 'Grooviter'
        description   = 'Memento tries to provide a high level abstraction for different EventStore implementations'
        inceptionYear = '2021'
        tags          = ['event-sourcing', 'event-store']

        links {
            website      = 'https://github.com/grooviter/memento'
            issueTracker = 'https://github.com/grooviter/memento/issues'
            scm          = 'https://github.com/grooviter/memento.git'
        }

        people {
            person {
                id    = 'marioggar'
                name  = 'Mario Garcia'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'releases'
                url  = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'

                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
            repository {
                name = 'snapshots'
                url  = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'

                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }

    licensing {
        enabled = false
        includes = ['**/*.groovy', '**/*.gradle']
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    coverage {
        jacoco {
            toolVersion = '0.8.6'
        }
    }

    quality {
        codenarc {
            enabled                = false
            toolVersion            = '2.0.0'
            ignoreFailures         = true
            maxPriority1Violations = 0
            maxPriority2Violations = Integer.MAX_VALUE
            maxPriority3Violations = Integer.MAX_VALUE
            aggregate { }
        }
    }

    docs {
        guide {
            publish {
                enabled = true
                message = "chores(docs): publish docs for version ${version}"
            }
        }
        groovydoc {
            enabled = true
            replaceJavadoc = true
        }
    }

    publishing {
        enabled             = true
        releasesRepository  = 'releases'
        snapshotsRepository = 'snapshots'
        signing {
            enabled    = !version.endsWith("-SNAPSHOT")
            keyId      = findProperty("signingKeyId")
            secretKey  = findProperty("signingKey")
            password   = findProperty("signingPassword")
        }
    }
}


allprojects {
    repositories {
        mavenCentral()
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        enabled = it.project.projectDir.parentFile.name != 'samples'
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = findProperty('sourceCompatibility')
        targetCompatibility = findProperty('targetCompatibility')
        options.encoding    = 'UTF-8'
    }

    configurations.codenarc {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy:$groovy"
        }
    }
}
